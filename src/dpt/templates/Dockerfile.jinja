{{- spacing.header -}}

{{- spacing.n -}}

{{ args | argparse }}

{{- spacing.t if args else spacing.nn -}}

FROM {{ dev.image }} as common
{{ dev.args | argparse }}

{{- spacing.n -}}

ENV POETRY_VIRTUALENVS_IN_PROJECT=true \
    PIP_DISABLE_PIP_VERSION_CHECK=1 {{ dev.env | envparse("\\\n    ") }}

{{- spacing.n -}}

{{ dev.reqs | reqsparse }}

{{- spacing.n -}}

RUN pip install --no-cache-dir poetry=={{ dev.poetry_version }}
RUN {{ request }} {{ scripts_path }}/pli git.io/pli.py  \
    && chmod +x {{ scripts_path }}/pli

WORKDIR /app

{{- spacing.t -}}

FROM common as dev

{{- spacing.n -}}

{{ prod.reqs | reqsparse }}

{{- spacing.n -}}

ADD poetry.lock poetry.lock
RUN pli {{ package }} {{ dev.poetry_extras | extrasparse }}
ADD pyproject.toml poetry.lock README.{{ readme_ext }} ./
ADD src src
ADD tests tests
RUN poetry install {{ dev.poetry_extras | extrasparse }}

{{- spacing.t -}}

FROM common as builder

{{- spacing.n -}}

RUN pli {{ package }} --no-dev {{ prod.poetry_extras | extrasparse }}

{{- spacing.t -}}

FROM {{ prod.image }} as production
{{ prod.args | argparse }}

{{- spacing.n if prod.env else spacing.z -}}

{{ prod.env | envparse("\\\n    ") }}

{{- spacing.n if prod.reqs else spacing.z -}}

{{ prod.reqs | reqsparse }}

{{- spacing.nn -}}

WORKDIR /app

{{- spacing.nn -}}

COPY --from=builder /app/.venv /app/.venv

{{- spacing.nn -}}

>>> if prod.entrypoint_script
ADD {{ prod.entrypoint_script }} {{ scripts_path }}/entrypoint
ENTRYPOINT [ "entrypoint" ]
>>> else
ENTRYPOINT [ "{{ prod.entrpoint_command }}" ]
>>> endif

{{- spacing.z -}}

>>> if prod.cmd
{{ prod.cmd | cmdparse }}
>>> endif

{{- spacing.footer -}}
